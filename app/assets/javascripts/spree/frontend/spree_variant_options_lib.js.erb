$.extend({
  keys: function(obj){
    var a = [];
    $.each(obj, function(k){ a.push(k) });
    return a;
  }
});

$.urlParam = function(name){
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    if (results==null){
       return null;
    }
    else{
       return results[1] || 0;
    }
};

if (!Array.indexOf) Array.prototype.indexOf = function(obj) {
  for(var i = 0; i < this.length; i++){
    if(this[i] == obj) {
      return i;
    }
  }
  return -1;
};

if (!Array.find_matches) Array.find_matches = function(a) {
  var i, m = [];
  a = a.sort();
  i = a.length
  while(i--) {
    if (a[i - 1] == a[i]) {
      m.push(a[i]);
    }
  }
  if (m.length == 0) {
    return false;
  }
  return m;
};




(function(VO, $, undefined) {

    var options, i18n, allow_backorders,
    allow_select_outofstock, default_instock;

    var variant, divs, parent, index = 0;
    var selection = [];
    var buttons;


    VO.init = function(params) {

        options = params['options'];
        i18n = params['i18n'];
        allow_backorders = !params['track_inventory_levels'];
        allow_select_outofstock = params['allow_select_outofstock'];
        default_instock = params['default_instock'];

        divs = $('#product-variants .variant-options');
        VO.disable(divs.find('a.option-value').addClass('locked'));
        VO.update();
        VO.enable(parent.find('a.option-value'));
        VO.toggle();

        if (default_instock) {
            divs.each(function(){
                $(this).find("ul.variant-option-values li a.option-value:first").click();
            });
        }
        VO.bind_cart_submit();
    }

    VO.get_index = function(parent) {
        return parseInt($(parent).attr('class').replace(/[^\d]/g, ''));
    }

    VO.update = function(i) {
        index = isNaN(i) ? index : i;
        parent = $(divs.get(index));
        buttons = parent.find('a.option-value');
    }

    VO.disable = function(btns) {
        return btns.removeClass('selected');
    }

    VO.enable = function(btns) {
        bt = btns.not('.unavailable').removeClass('locked').unbind('click')
        if (!allow_select_outofstock && !allow_backorders)
            bt = bt.filter('.in-stock')
        return bt.click(this.handle_click).filter('.auto-click').removeClass('auto-click').click();
    }

    VO.advance = function() {
        index++
        VO.update();
        VO.inventory(buttons.removeClass('locked'));
        VO.enable(buttons);
    }

    VO.inventory = function(btns) {
        var keys, variants, selected = {};
        var sels = $.map(divs.find('a.selected'), function(i) { return i.rel });
        $.each(sels, function(key, value) {
            key = value.split('-');
            var v = options[key[0]][key[1]];
            keys = $.keys(v);
            var m = Array.find_matches(selection.concat(keys));
            if (selection.length == 0) {
                selection = keys;
            } else if (m) {
                selection = m;
            }
        });
        btns.removeClass('in-stock out-of-stock unavailable').each(function(i, element) {
            var variants = VO.get_variant_objects(element.rel);
            var keys = $.keys(variants);
            if (keys.length == 0) {
                VO.disable($(element).addClass('unavailable locked').unbind('click'));
            } else if (keys.length == 1) {
                _var = variants[keys[0]];
                $(element).addClass(_var.in_stock ? selection.length == 1 ? 'in-stock auto-click' : 'in-stock' : 'out-of-stock');
            } else if (allow_backorders) {
                $(element).addClass('in-stock');
            } else {
                var count = 0;
                $.each(variants, function(key, value) {
                    count += value.in_stock ? 1 : 0
                });
                $(element).addClass(count > 0 ? 'in-stock' : 'out-of-stock');
            }
        });
    }

    VO.get_variant_objects = function(rels) {
        //rel ex : 2-5 -> [ot-ov]

        var i, ids, obj, variants = {};
        if (typeof(rels) == 'string') { rels = [rels]; }
        var otid, ovid, opt, opv;
        i = rels.length;
        try {
            while (i--) {
                ids = rels[i].split('-');
                otid = ids[0];
                ovid = ids[1];
                opt = options[otid];
                if (opt) {
                    opv = opt[ovid];
                    ids = $.keys(opv);
                    if (opv && ids.length) {
                        var j = ids.length;
                        while (j--) {
                            obj = opv[ids[j]];
                            if (obj && $.keys(obj).length && 0 <= selection.indexOf(obj.id.toString())) {
                                variants[obj.id] = obj;
                            }
                        }
                    }
                }
            }
        } catch(error) {
            //console.log(error);
        }
        return variants;
    }

    VO.to_f = function(string) {
        return string ? parseFloat(string.replace(/[^\d\.]/g, '')) : 0;
    }

    // Find matching variants for selected option value
    // Set price or price range if matching variants have different prices.
    VO.find_variant = function() {
        var selected = divs.find('a.selected');
        var variants = VO.get_variant_objects(selected.get(0).rel);
        if (selected.length == divs.length) {
            return variant = variants[selection[0]];
        } else {
            var prices = [];
            $.each(variants, function(key, value) { prices.push(value.price) }); 
            prices = $.unique(prices).sort(function(a, b) {
                return VO.to_f(a) < VO.to_f(b) ? -1 : 1;
            });
            if (prices.length == 1) {
                $('#product-price .price').html('<span class="price assumed">' + prices[0] + '</span>');
            } else {
                $('#product-price .price').html('<span class="price from">' + prices[0] + '</span> - <span class="price to">' + prices[prices.length - 1] + '</span>');
            }
            return variants;
        }
    }

    VO.toggle = function(variants) {
        if (variant) {
            $('#variant_id, form[data-form-type="variant"] input[name$="[variant_id]"]').val(variant.id);
            $('#product-price .price').removeClass('unselected').text(variant.price);
            if (variant.in_stock)
                $('#cart-form button[type=submit]').removeClass('disabled').fadeTo(100, 1);
            $('form[data-form-type="variant"] button[type=submit]').removeClass('disabled').fadeTo(100, 1);
            try {
                Spree.VariantOptions.show_variant_images(variant.id);
            } catch(error) {
                // depends on modified version of product.js
            }
        } else {

            if (variants) {
                variants_ids = $.keys(variants);
                Spree.VariantOptions.show_variant_images(variants_ids.slice(0, 1));
            }

            $('#variant_id, form[data-form-type="variant"] input[name$="[variant_id]"]').val('');
            $('#cart-form button[type=submit], form[data-form-type="variant"] button[type=submit]').addClass('disabled').fadeTo(0, 0.5);
            price = $('#product-price .price').addClass('unselected')
            // Replace product price by "(select)" only when there are at least 1 variant not out-of-stock
            variants = $("div.variant-options.index-0")
            if (variants.find("a.option-value.out-of-stock").length != variants.find("a.option-value").length)
                price.text(i18n.variant_options_select);
        }
    }

    VO.clear = function(i) {
        variant = null;
        VO.update(i);
        VO.enable(buttons.removeClass('selected'));
        VO.toggle();
        parent.nextAll().each(function(index, element) {
            VO.disable($(element).find('a.option-value').show().removeClass('in-stock out-of-stock').addClass('locked').unbind('click'));
            //$(element).find('a.clear-button').hide();
            $(element).find('.variant-option-type .selection').html('').removeClass('out-of-stock');
        });
        parent.find('.variant-option-type.selection').html('').removeClass('out-of-stock');
        Spree.VariantOptions.show_all_variant_images();
    }


    VO.handle_clear = function(evt) {
        evt.preventDefault();
        VO.clear(VO.get_index(this));
    }

    VO.handle_click = function(evt) {
        evt.preventDefault();
        variant = null;
        selection = [];
        var a = $(this);
        if (!parent.has(a).length) {
            window.history.pushState("object or string", "Title", window.location.origin + window.location.pathname + "?<%=SpreeVariantOptions::VariantConfig.main_option_type_label%>=" + a.attr("title"));
            VO.clear(divs.index(a.parents('.variant-options:first')));
        }
        VO.disable(buttons);
        var a = VO.enable(a.addClass('selected'));

        VO.advance();
        VO.handle_selected();
        variants = VO.find_variant();
        VO.toggle(variants);
        VO.remove_errors();
    }

    VO.handle_selected = function() {
        var selected = divs.find('a.selected');
        selected.each(function(){
            $this = $(this)
            var selection = $this.parents('.variant-options').find('.selection')
            selection.html($this.attr('title'));

            if ($this.hasClass('out-of-stock'))
                selection.addClass('out-of-stock').attr('title', i18n.out_of_stock);
        });
    };


    /*TODO: theme dependent ... remove insert, so as to test a js handler */

    VO.show_errors = function(e) {
        $(e).addClass('error')
    }

    VO.remove_errors = function() {
        $('.variant-option-values').removeClass('error')
    }

    VO.bind_cart_submit = function() {
        $('#add-to-cart-button').on("click", function(e) {
            if ($(e.currentTarget).hasClass('disabled') ) {
                e.preventDefault();

                //highlight errors - group of divs without a '.selected' child
                $('.variant-option-values').each(function(i,e) {
                    $(e).has('.selected')[0] ? '' : VO.show_errors(e)
                } );

            }
            else {
                $(this).off(e);
            }

        });
    }

}(Spree.VariantOptions = Spree.VariantOptions || {}, jQuery));
